[{"categories":null,"contents":"Hello!\n","date":"October 29, 2025","hero":"/images/default-hero.jpg","permalink":"https://uniquekarki.github.io/posts/docker/deploy/","summary":"\u003cp\u003eHello!\u003c/p\u003e","tags":null,"title":"Docker Deployment"},{"categories":null,"contents":"This is a collection of personal notes and references that I have gathered while learning Docker.\nTable of Contents Version List Containers Remove Containers List Images Remove Images Run Container Stop Container Inspect Container Docker Log Port Mapping Volume Mounting Creating Images CMD VS ENTRYPOINT Docker Compose Version sudo docker version\nList Containers To list the active containers sudo docker ps\nTo list all the containers including the inactive ones sudo docker ps -a\nRemove Containers sudo docker rm \u0026lt;container-name/id\u0026gt;\nList Images sudo docker images\nRemove Images sudo docker rmi \u0026lt;image-name\u0026gt;\nRun Container sudo docker run \u0026lt;image-name\u0026gt;\nThe above command does the following:\nPulls the image from docker registry (DockerHub or private ones), if not available locally Creates a container Starts the container sudo docker run -d \u0026lt;image-name\u0026gt;\nThis runs the container in detach mode which means that the terminal is free to use for other commands (maybe starting another container)\nsudo docker run -it \u0026lt;image-name\u0026gt;\n-i Tag This tag keeps the STDIN (Standard input) open so that you can communicate with the container via. terminal\n-t Tag This tag allocates a pseudo-terminal so that it displays any terminal messages to the user\nStop Container sudo docker stop \u0026lt;container-name/id\u0026gt;\nInspect Container sudo docker inspect \u0026lt;container-name/id\u0026gt;\nDisplays more detail than ps.\nDocker Log sudo docker log \u0026lt;container-name/id\u0026gt; Displays the log of the container.\nPort Mapping sudo docker run \u0026lt;image-name\u0026gt; Suppose you have a docker engine that hosts a website at 0.0.0.0:8080. When you go to that link the website doesn\u0026rsquo;t open as this link is internal to the docker container. To access it using your IP and port number you have to map the port.\nsudo docker run -p 80:8080 \u0026lt;image-name\u0026gt; Now when you go to the link :80 the website opens\nVolume Mounting When a docker container completes its lifecycle and stops the data contained in it will also be lost. To prevent this loss of important data from docker container we use volume mounting. This is a persistent storage mechanism that helps store data outside container in docker host.\nVolume mounting\nsudo docker run -v \u0026lt;dir-name\u0026gt;:\u0026lt;docker-data-path\u0026gt; \u0026lt;image-name\u0026gt;\nThe above command saves the data present in to docker’s default volume location /var/lib/docker/volumes/.\nBind mounting\nsudo docker run -v \u0026lt;local-path\u0026gt;:\u0026lt;docker-data-path\u0026gt; \u0026lt;image-name\u0026gt;\nThe above command performs similarly to volume mounting but it saves the data in the specified location () in host engine.\nNewer style to perform this is:\nVolume mounting\nsudo docker run --mount type=volume,source=\u0026lt;volume-name\u0026gt;,target=\u0026lt;container-path\u0026gt; \u0026lt;image-name\u0026gt;\nBind mounting\nsudo docker run --mount type=bind,source=\u0026lt;local-path\u0026gt;,target=\u0026lt;docker-data-path\u0026gt; \u0026lt;docker-image\u0026gt;\nCreating Images Steps to follow to run an application:\nStart by defining base image or OS Update apt repo Install dependencies using apt Intall program specific dependencies (eg. using pip for python) Copy source code to /opt folder Run the server Following the above steps we create a Dockerfile as shown in the sample below.\nDockerfile:\nFROM Ubuntu \u0026lt;--------------------------------- Starts from a base image or OS RUN apt-get update\u0026lt;/br\u0026gt; \u0026lt;--------------------------------- Install dependencies RUN apt-get install python | | RUN pip install flask\u0026lt;/br\u0026gt; | RUN pip install flask-mysql \u0026lt;--------------------------------- COPY . /opt/source-code \u0026lt;--------------------------------- Copy source code ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run \u0026lt;------ Specify entrypoint to run the app Now to build an image:\nsudo docker build Dockerfile -t \u0026lt;docker-registry\u0026gt;/\u0026lt;username\u0026gt;/\u0026lt;image-name\u0026gt;\nTo push the docker image in docker-registry:\nsudo docker push \u0026lt;docker-registry\u0026gt;/\u0026lt;username\u0026gt;/\u0026lt;image-name\u0026gt;\nCMD VS ENTRYPOINT Both CMD and ENTRYPOINT are instructions used to define what command should be run when a container starts.\nCMD\nWe usually go with the following command to run an instruction\nsudo docker run \u0026lt;image\u0026gt; \u0026lt;command\u0026gt;\nExample:\nsudo docker run ubuntu sleep 10 This runs the docker container using the image and sleeps after 10 seconds. But the use of sleep looks revealing.\nTo implement thi using CMD we modify the Dockerfile like:\nDockerfile\nFROM Ubuntu . . . CMD sleep 10 / CMD [\u0026#34;sleep\u0026#34;,\u0026#34;10\u0026#34;] ENTRYPOINT\nSuppose we want to specify certain parameters during the run time of the command. This is not allowed by CMD as we have to explicitly define the parameters (like 10 for sleep). ENTRYPOINT allows to set such parameters.\nDockerfile\nFROM Ubuntu . . . ENTRYPOINT [\u0026#34;sleep\u0026#34;] Example:\nsudo docker run ubuntu 10\nThis attaches 10 after the sleep command and the system ends after 10 seconds.\nBoth\nSuppose you want to use ENTRYPOINT but you dont give any arguments. This causes error during the run time. So you have to set a default parameter value when it is not set. For that you make use of both CMD and ENTRYPOINT.\nDockerfile\nFROM Ubuntu . . . ENTRYPOINT [\u0026#39;sleep\u0026#39;] CMD [\u0026#39;10\u0026#39;] sudo docker run ubuntu 5\nThis makes and run the container for 5 seconds then closes it.\nsudo docker run ubuntu\nThis makes and run the container for default value (10 seconds) then closes it.\nDocker Compose The problem with docker run:\nSuppose you make a voting application which is composed of many other application such as:\nVoting application - Where the user casts their vote In-memory database - Redis server to temporarily store the data from voting app Worker application - Backend application to run all the functionalities Postgres database - Where all of the voting data is stored Result application - Where the voting result is displayed In order to run all of these application at once and communicate with each other we must specify their respective links like shown below.\nsudo docker run -d --name=redis redis sudo docker run -d --name=db postgres:9.4 sudo docker run -d --name=vote -p 5000:80 --link= redis:redis voting-app sudo docker run -d --name=result -p 5001:80 --link db:db result-app sudo docker run -d --name=worker --link db:db --link redis:redis worker This way the command looks tedious and unmanagable to enter one by one in Terminal. To solve this we use a .yaml file to specify all of the above.\nVersion 1 docker-compose.yaml\nredis: \u0026lt;---------------- Name of container image: redis \u0026lt;---------------- Name of image if already created db: image: postgres:9.4 vote: image: voting-app ports: \u0026lt;---------------- Port mapping for voting-app -5000:80 links: \u0026lt;---------------- Used to specify dependencies as voting-app depends upon redis application -redis result: image: result-app / build: \u0026lt;path-to-code-with-dockerfile\u0026gt; \u0026lt;--------------- Use \u0026#39;image\u0026#39; if image is already made else use \u0026#39;build\u0026#39; ports: -5001:80 links: -db worker: image: worker links: -redis -db Version 2 docker-compose.yaml\nversion 2 services: redis: image: redis db: image: postgres:9.4 vote: image: voting-app ports: -5000:80 depends_on: -redis result: image: result-app / build: \u0026lt;path-to-code-with-dockerfile\u0026gt; ports: -5001:80 depends_on: -db worker: image: worker depends_on: -redis -db Suppose you want to connect specific services to a dedicated network to separate the traffic. The convention for such scenario is as given below. docker-compose.yaml\nversion 2 services: redis: image: redis networks: - back-end \u0026lt;--------------- Connects redis container to \u0026#39;back-end\u0026#39; network db: image: postgres:9.4 networks: - back-end vote: image: voting-app ports: - 5000:80 depends_on: - redis networks: - front-end \u0026lt;--------------- Connects vote container to both \u0026#39;back-end\u0026#39; and \u0026#39;front-end\u0026#39; networks - back-end network: \u0026lt;--------------- Defines the networks front-end: back-end: ","date":"September 17, 2025","hero":"/images/default-hero.jpg","permalink":"https://uniquekarki.github.io/posts/docker/intro/","summary":"\u003cp\u003eThis is a collection of personal notes and references that I have gathered while learning Docker.\u003c/p\u003e\n\u003ch1 id=\"table-of-contents\"\u003eTable of Contents\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"#version\"\u003eVersion\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#list-containers\"\u003eList Containers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#remove-containers\"\u003eRemove Containers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#list-images\"\u003eList Images\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#remove-images\"\u003eRemove Images\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#run-container\"\u003eRun Container\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#stop-container\"\u003eStop Container\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#inspect-container\"\u003eInspect Container\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#docker-log\"\u003eDocker Log\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#port-mapping\"\u003ePort Mapping\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#volume-mounting\"\u003eVolume Mounting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#creating-images\"\u003eCreating Images\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#cmd-vs-entrypoint\"\u003eCMD VS ENTRYPOINT\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#docker-compose\"\u003eDocker Compose\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"version\"\u003eVersion\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003esudo docker version\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"list-containers\"\u003eList Containers\u003c/h2\u003e\n\u003cp\u003eTo list the active containers \u003c/br\u003e\n\u003ccode\u003esudo docker ps\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eTo list all the containers including the inactive ones \u003c/br\u003e\n\u003ccode\u003esudo docker ps -a\u003c/code\u003e\u003c/p\u003e","tags":null,"title":"Docker Introduction"},{"categories":null,"contents":"We humans read words effortlessly, but computers only understand numbers. So how do we bridge that gap? That’s where methods like Bag-of-Words (BoW) and TF-IDF come in.\nWhat problem are we solving? When we read a piece of text, the words seem never-ending with an infinite vocabulary. The problem with raw text is that it is messy, unstructured, and consists of a multitude of words. We need a way to represent raw text in numerical form such that the data is structured and easier to process. This process is known as vectorization, and we’ll discuss it.\nBag-of-Words (BoW) Bag-of-Words (BoW) is one of the fundamental ways of converting text to numbers. In simple terms, it keeps count of the occurrence of each unique word in a document. It is used for its simplicity, intuitiveness, and also its effectiveness. Let’s break it down step-by-step and see how it works.\nSuppose you have the following sentences:\n“How are you?” “I am very good.” “What a lovely day.”\nStep 1 Make a set of unique words (vocabulary) vocab = (how, are, you, i, am, very, good, what, a, lovely, day) len(vocab) = 11\nStep 2 Initialize a zero vector of length len(vocab) for each sentence\nv1 = [0,0,0,0,0,0,0,0,0,0,0] v2 = [0,0,0,0,0,0,0,0,0,0,0] v3 = [0,0,0,0,0,0,0,0,0,0,0]\nStep 3 Keep count of how many times a word in the vocab has occurred in the sentence, and replace the 0 with the count.\nv1 = [1,1,1,0,0,0,0,0,0,0,0] v2 = [0,0,0,1,1,1,1,0,0,0,0] v3 = [0,0,0,0,0,0,0,1,1,1,1]\nNow you have successfully converted the sentence to numerical form using BoW. Notice how each sentence is now just a row of numbers; no meaning, no grammar, just counts.\nBut, easy as it looks, there are many drawbacks to BoW.\nDrawbacks: All of the words are given the same priority. Lots of filler words, such as “a”, “am”, “the”, etc., make the vector size large. There is no priority given to rare words in the sentences. But BoW isn’t perfect. That’s where TF-IDF comes in — it adds some ‘common sense’ to word importance.\nTerm Frequency - Inverse Document Frequency(TF-IDF) This technique of vectorization measures the importance of different words in a document. To understand it, let’s break down each term from the name itself.\nTF = word frequency in one document DF = how many documents contain the word IDF = how rare a word is across all documents TF-IDF = TF × IDF Term Frequency (TF) t -\u0026gt; term/word d -\u0026gt; document/page N -\u0026gt; Number of document/page tf(t,d)=count of t in d/Total no. of words in d\nThis reflects how frequently a word appears within a text\nDocument Frequency (DF) df(t) = No. of d where t has occured\nThis reflects the number of documents/pages in which the term/word appears.\nInverse Document Frequency (IDF) The main drawback of Term-Frequency is that it considers all of the words as equally important\nThe most occurring words, such as a, an, the, etc., should be weighed down and rare words should be scaled up.\nidf(t) =N/df\nProblems with the above formula:\nIf N becomes very high, idf explodes If df = 0, idf becomes invalid The updated formula for idf becomes, idf(t) =log(N/(df + 1))\nTF-IDF Incorporating all of the above, we get, tf-idf(t) = tf(t,d) x log(N/(df + 1))\nHere’s a side-by-side view to make the differences clear.\nBoW TF-IDF Treats all words equally Adjusts word importance based on word frequency and rarity across documents Stopwords reduce the meaningfulness of the model Dilutes the importance of stopwords Document length affects word frequency Normalizes the effect of document length Simple to implement, but creates a high-dimensional sparse vector More complex, provides a more informative representation BoW and TF-IDF may look old-school compared to embeddings like BERT, but they’re still powerful starting points. Personally, I find that learning these simple methods makes the modern ones much less of a black box.\n","date":"October 11, 2024","hero":"/images/default-hero.jpg","permalink":"https://uniquekarki.github.io/posts/bow-vs-tfidf/","summary":"\u003cp\u003eWe humans read words effortlessly, but computers only understand numbers. So how do we bridge that gap? That’s where methods like Bag-of-Words (BoW) and TF-IDF come in.\u003c/p\u003e\n\u003ch2 id=\"what-problem-are-we-solving\"\u003eWhat problem are we solving?\u003c/h2\u003e\n\u003cp\u003eWhen we read a piece of text, the words seem never-ending with an infinite vocabulary. The problem with raw text is that it is messy, unstructured, and consists of a multitude of words. We need a way to represent raw text in numerical form such that the data is structured and easier to process. This process is known as vectorization, and we’ll discuss it.\u003c/p\u003e","tags":null,"title":"BoW Vs. TF-IDF"},{"categories":null,"contents":"Welcome to my corner of the internet! I’m Unique Karki, and I’m here to share a little about my journey—bumpy roads, wild adventures, and all.\nWhere It All Began I was born and raised in Kathmandu as a single child, which meant my parents showered me with attention and a treasure trove of learning experiences. They enrolled me in everything from art and music classes to sports, ensuring I explored a little bit of everything. This diverse upbringing sparked my love for learning and left me with a range of skills I still cherish today—turns out, their plan worked like a charm!\nStrumming Through the Years My love for music kicked off when my grandfather brought home a harmonium, instantly sparking my curiosity to create my own tunes. I was especially drawn to the guitar, inspired by my musically inclined uncle (thanks, maternal side!). I had the privilege of learning from some of the best in Nepal, including Mr. Sunit Kansakar from Mukti and Revival, and Mr. John Shrestha from Sabin Rai \u0026amp; The Pharaoh. Over the years, I’ve performed in various competitions, from cozy gatherings to larger crowds. While I’m still honing my skills, I definitely don’t shy away from the spotlight—just a little exposure therapy!\nPages That Left a Mark My reading journey really took off at St. Xavier\u0026rsquo;s School, where they made reading books a big deal. I still remember the thrill of getting my first library card and heading straight for the shelves. The first book I picked up was Harry Potter and the Philosopher\u0026rsquo;s Stone, and I was instantly hooked! Over the years, I found myself gravitating towards philosophical works, with Dostoevsky’s Crime and Punishment becoming my all-time favorite. Reading isn’t just a hobby for me; it’s a part of who I am. So, if you ever ask me what I\u0026rsquo;m reading, I promise I’ll always have a title to share!\nStaying Active I started running after high school, and let me tell you, it’s a love/hate relationship! At the same time, I picked up swimming, and I absolutely love it—I can swim 1 km continuously and I’m working on leveling up my skills. During my undergrad years, I hit the gym and played basketball, even snagging a few competition wins along the way. Now, I’m all about trail running, and the community is incredibly supportive—it’s like a family! There’s something serene about tackling those challenging terrains alone, even if it means running for hours with just a bottle of water. I’ve completed the KVR-100, which is a wild 100-mile run around the stunning Kathmandu Valley. I also squeeze in some tennis every now and then. With running and swimming under my belt, I decided to take on a triathlon—without much cycling experience! It was a New Year’s resolution for 2024, and I jumped at the chance. Through all these activities, I’ve found joy in keeping fit and challenging myself.\nLittle Passions I’ve always had a curious mind, and I love picking up new hobbies! A while back, I started learning French, and I’ve picked up a few phrases that usually get a laugh from French speakers. I also took up crochet, and now I often find myself getting requests to make something—honestly, I don’t mind at all! Gardening is another passion; there’s something so calming about watering my plants in the evening—it’s my little moment of zen. I’m also a fan of diving into university lectures on a variety of topics; I just love soaking up new knowledge. While some might think my pursuits are a bit all over the place, I truly believe that no skill or bit of knowledge ever goes to waste. I’m all about embracing new experiences and keeping the learning spirit alive!\nLooking back at my journey, I’m thankful for every experience that has shaped who I am today. I can’t wait to see what new adventures and lessons lie ahead as I continue to embrace curiosity and growth!\n","date":"October 11, 2024","hero":"/posts/my-story/background.png","permalink":"https://uniquekarki.github.io/posts/my-story/","summary":"\u003cp\u003eWelcome to my corner of the internet! I’m Unique Karki, and I’m here to share a little about my journey—bumpy roads, wild adventures, and all.\u003c/p\u003e\n\u003ch5 id=\"where-it-all-began\"\u003eWhere It All Began\u003c/h5\u003e\n\u003cp\u003eI was born and raised in Kathmandu as a single child, which meant my parents showered me with attention and a treasure trove of learning experiences. They enrolled me in everything from art and music classes to sports, ensuring I explored a little bit of everything. This diverse upbringing sparked my love for learning and left me with a range of skills I still cherish today—turns out, their plan worked like a charm!\u003c/p\u003e","tags":null,"title":"My Story"},{"categories":null,"contents":"I consider myself fortunate enough to have picked up a few books that have had a pround effect on my. This page lists some of such books and also my current reads.\nCurrent Reads: The Master and Margarita - Mikhail Bulgakov Reading List: Crime and Punishment - Fyodor Dostoevsky The Idiot - Fyodor Dostoevsky Night - Elie Wiesel Man\u0026rsquo;s Search for Meaning - Viktor Frankl Steve Jobs - Walter Isaacson The Five People You Meet in Heaven - Mitch Albom Tuesdays with Morrie - Mitch Albom 1984 - George Orwell Animal Farm - George Orwell The Book Thief - Markus Zusak The Art of War - Sun Tzu How to Win Friends and Influence People - Dale Carnegie The Metamorphosis - Franz Kafka The Great Gatsby - F. Scott Fitzgerald Harry Potter Series - J.K. Rowling The Power Of Your Subconscious Mind - Joseph Murphy The Brothers Karamazov - Fyodor Dostoevsky DNF List: (We\u0026rsquo;re only humans afterall) Thus Spoke Zarathustra - Friedrich Nietzsche The Divine Comedy - Dante Alighieri ","date":"October 11, 2024","hero":"/posts/reads/reads.jpeg","permalink":"https://uniquekarki.github.io/posts/reads/","summary":"\u003cp\u003eI consider myself fortunate enough to have picked up a few books that have had a pround effect on my. This page lists some of such books and also my current reads.\u003c/p\u003e\n\u003ch5 id=\"current-reads\"\u003eCurrent Reads:\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003eThe Master and Margarita - Mikhail Bulgakov\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"reading-list\"\u003eReading List:\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003eCrime and Punishment - Fyodor Dostoevsky\u003c/li\u003e\n\u003cli\u003eThe Idiot - Fyodor Dostoevsky\u003c/li\u003e\n\u003cli\u003eNight - Elie Wiesel\u003c/li\u003e\n\u003cli\u003eMan\u0026rsquo;s Search for Meaning - Viktor Frankl\u003c/li\u003e\n\u003cli\u003eSteve Jobs - Walter Isaacson\u003c/li\u003e\n\u003cli\u003eThe Five People You Meet in Heaven - Mitch Albom\u003c/li\u003e\n\u003cli\u003eTuesdays with Morrie - Mitch Albom\u003c/li\u003e\n\u003cli\u003e1984 - George Orwell\u003c/li\u003e\n\u003cli\u003eAnimal Farm - George Orwell\u003c/li\u003e\n\u003cli\u003eThe Book Thief - Markus Zusak\u003c/li\u003e\n\u003cli\u003eThe Art of War - Sun Tzu\u003c/li\u003e\n\u003cli\u003eHow to Win Friends and Influence People - Dale Carnegie\u003c/li\u003e\n\u003cli\u003eThe Metamorphosis - Franz Kafka\u003c/li\u003e\n\u003cli\u003eThe Great Gatsby - F. Scott Fitzgerald\u003c/li\u003e\n\u003cli\u003eHarry Potter Series - J.K. Rowling\u003c/li\u003e\n\u003cli\u003eThe Power Of Your Subconscious Mind - Joseph Murphy\u003c/li\u003e\n\u003cli\u003eThe Brothers Karamazov - Fyodor Dostoevsky\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch5 id=\"dnf-list-were-only-humans-afterall\"\u003eDNF List: (We\u0026rsquo;re only humans afterall)\u003c/h5\u003e\n\u003col\u003e\n\u003cli\u003eThus Spoke Zarathustra - Friedrich Nietzsche\u003c/li\u003e\n\u003cli\u003eThe Divine Comedy - Dante Alighieri\u003c/li\u003e\n\u003c/ol\u003e","tags":null,"title":"Reading List"}]